resource "google_iam_deny_policy" "example" {
  provider = google-beta
  parent   = urlencode("cloudresourcemanager.googleapis.com/projects/united-lane-354904")
  name     = "my-deny-policy"
  display_name = "A deny rule"
  rules {
    description = "First rule"
    deny_rule {
      denied_principals = ["principalSet://goog/public:all"]
      denied_permissions = ["cloudresourcemanager.googleapis.com/projects.delete"]
    }
  }
}



gcloud iam policies list --attachment-point=cloudresourcemanager.googleapis.com/projects/PROJECTID --kind=denypolicies --format=json

gcloud beta iam policies delete my-deny-policy  --attachment-point=cloudresourcemanager.googleapis.com/projects/PROJECTID  --kind=denypolicies




READme
======

Identity and Access Management (IAM) deny policies let you set guardrails on access to Google Cloud resources. With deny policies, you can define deny rules that prevent certain principals from using certain permissions, regardless of the roles they're granted.
This code blocks all types of members(users/groups/service accounts) from impersonating service accounts even if they have required IAM roles.

Inputs:

This module expects 2 inputs, 
1. project id on which to create the deny policy
2. name of the deny policy

These deny policies cant be seen from console. One of below commands can list them,

gcloud iam policies list --attachment-point=cloudresourcemanager.googleapis.com/projects/YOUR_PROJECT_ID --kind=denypolicies --format=json

(or) 

gcloud beta iam policies list --attachment-point=cloudresourcemanager.googleapis.com/projects/YOUR_PROJECT_ID --kind=denypolicies --format=json





gcloud compute instances list --project PROJECT-ID --impersonate-service-account=service-account-email-to-impersonate








============


OR (resource.type=\"gce_subnetwork\" AND logName: \"logs/compute.googleapis.com%2Ffirewall\") OR resource.type=\"vpn_gateway\""







resource.type=gce_subnetwork AND logName: "logs/compute.googleapis.com%2Ffirewall"







===========================



notificationtype = asset_type.split('.')[0]
print("asset_type:", asset_type)

insert_stmt = f"INSERT `{project}.{dataset}.{table}` (data, uuid, creationtimestamp, notifiedtimestamp, notificationtype) VALUES( '{original_asset_data_encoded}', '{guidstr}', '{created_ts}', CURRENT_TIMESTAMP(), '{notificationtype.upper()}');"


=====================================================================

if "iam" in asset_type:
        notificationtype = "iam"
    else:
        notificationtype = "RESOURCES & SERVICES"

https://go.microsoft.com/fwlink/?linkid=2139369
=================


vi /etc/google/snapshots/pre.sh

#!/bin/bash
sudo fsfreeze -f /


vi /etc/google/snapshots/post.sh

#!/bin/bash
sudo fsfreeze -u /


vi /etc/default/instance_configs.cfg

[Snapshots]
enabled = true
timeout_in_seconds = 120

sudo systemctl restart google-guest-agent.service









ssh-keygen -t rsa -f C:\Users\dkorwar-etc\.ssh\nessus -C nessus -b 2048


https://cloud.google.com/compute/docs/connect/add-ssh-keys#console_2


gcloud compute os-config os-policy-assignment-reports list --location=us-west1-a

=====================================================================================================================




Change needed:
--------------

  expiration_policy {
    ttl = ""
  }




example:

resource "google_pubsub_subscription" "example" {
  name  = "tmp-sub"
  topic = "projects/rare-daylight-390015/topics/test"
  retain_acked_messages      = false
  ack_deadline_seconds = 20

  expiration_policy {
    ttl = ""
  }
}


https://cloud.google.com/bigquery/docs/visualize-looker-studio





gcloud services list --enabled --project=PROJECTID --format="value(TITLE)"







gcloud compute instances add-tags INSTANCE_NAME --project PROJECT_ID --zone us-east4-b --tags foobar




Source Org:
constraints/resourcemanager.allowedExportDestinations

Destination org:
constraints/resourcemanager.allowedImportSources



Source:
gcloud resource-manager org-policies allow --organization SRC_ORG_ID resourcemanager.allowedExportDestinations "under:organizations/DST_ORG_ID"

Dest:
gcloud resource-manager org-policies allow --organization DST_ORG_ID resourcemanager.allowedImportSources "under:organizations/SRC_ORG_ID"
